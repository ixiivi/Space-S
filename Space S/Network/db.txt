`TempServer.json` 파일에 포함된 JSON 데이터를 Swift 코드에서 수정하는 방법을 설명하겠습니다. 주어진 JSON은 사용자 정보를 배열 형태로 저장하며, 각 객체는 `id`, `first_name`, `last_name`, `country`, `bot`, `sponsor` 필드를 포함합니다. 예시 데이터에서 `bot`과 `sponsor`는 `nil`이며, 이를 포함한 필드 값을 수정하려면 JSON을 파싱하고, 데이터를 업데이트한 후, 파일에 다시 저장해야 합니다.

아래에서는 Swift에서 JSON 파일을 읽고, 값을 수정하며, 파일에 저장하는 과정을 단계별로 제공합니다. 질문의 맥락(화성 로봇 앱, SwiftUI)을 고려해, 수정 예시로 `bot`과 `sponsor` 값을 추가하거나 변경하는 코드를 작성하겠습니다. 또한, JSON 구조를 처리하기 위한 Codable 프로토콜과 파일 입출력을 다룹니다.

---

### 1. JSON 구조와 요구사항 분석
- **JSON 구조**:
  ```json
  [
      {
          "id": 448134651345,
          "first_name": "Jaehyun",
          "last_name": "Kim",
          "country": "Korea",
          "bot": null,
          "sponsor": null
      }
  ]
  ```
  - 배열 안의 객체: 사용자 정보.
  - `bot`과 `sponsor`: 현재 `null` (Swift에서는 `nil`).
- **목표**:
  - 특정 필드(예: `bot`, `sponsor`) 값을 수정(예: `nil` → 문자열 또는 객체).
  - 수정된 데이터를 `TempServer.json` 파일에 저장.
- **가정**:
  - `TempServer.json`은 앱의 로컬 파일(예: 프로젝트 디렉토리 또는 Documents 디렉토리)에 있음.
  - `bot`과 `sponsor`는 `String?` 또는 다른 타입(예: 객체)으로 업데이트 가능.
  - 예시로 `bot`을 `"Gen6 Robot"`, `sponsor`를 `"Quantum Sponsor"`로 수정한다고 가정.
- **맥락**:
  - 화성 로봇 앱에서 사용자 데이터 관리.
  - `bot`은 선택된 로봇(예: Gen6, Gen5), `sponsor`는 후원 옵션(예: SponsorshipOptionsView에서 선택)일 가능성.

---

### 2. Swift 코드로 JSON 수정

#### **단계 1: Codable 모델 정의**
JSON 데이터를 파싱하려면 `Codable` 프로토콜을 준수하는 구조체를 정의합니다.

```swift
import Foundation

struct User: Codable {
    let id: Int
    let firstName: String
    let lastName: String
    let country: String
    let bot: String?
    let sponsor: String?

    // JSON 키와 Swift 프로퍼티 매핑
    enum CodingKeys: String, CodingKey {
        case id
        case firstName = "first_name"
        case lastName = "last_name"
        case country
        case bot
        case sponsor
    }
}
```

- **설명**:
  - `id`: JSON의 `id`는 큰 숫자지만 `Int`로 충분 (64비트 정수).
  - `bot`, `sponsor`: `String?`로 정의해 `null` (`nil`) 처리.
  - `CodingKeys`: JSON의 스네이크 케이스(`first_name`)를 캐멀 케이스(`firstName`)로 매핑.

#### **단계 2: JSON 파일 읽기**
로컬 파일(`TempServer.json`)에서 JSON 데이터를 읽어 `User` 배열로 디코딩합니다.

```swift
func readJSONFile(from filePath: String) -> [User]? {
    do {
        // 파일 데이터 읽기
        let data = try Data(contentsOf: URL(fileURLWithPath: filePath))
        // JSON 디코딩
        let decoder = JSONDecoder()
        let users = try decoder.decode([User].self, from: data)
        return users
    } catch {
        print("Error reading JSON: \(error)")
        return nil
    }
}
```

- **가정**: `filePath`는 `TempServer.json`의 절대 경로 또는 프로젝트 내 상대 경로 (예: `"/path/to/TempServer.json"`).
- **주의**: 프로젝트 내 파일은 `Bundle.main.url`로 접근하거나, Documents 디렉토리에 저장된 경우 `FileManager`로 접근.

#### **단계 3: 데이터 수정**
특정 사용자의 `bot`과 `sponsor` 값을 수정합니다. 예시로 `id`가 `448134651345`인 사용자의 값을 업데이트합니다.

```swift
func updateUserData(users: inout [User], id: Int, bot: String?, sponsor: String?) -> Bool {
    if let index = users.firstIndex(where: { $0.id == id }) {
        // 새로운 값으로 사용자 업데이트
        users[index] = User(
            id: users[index].id,
            firstName: users[index].firstName,
            lastName: users[index].lastName,
            country: users[index].country,
            bot: bot,
            sponsor: sponsor
        )
        return true
    }
    return false
}
```

- **설명**:
  - `inout`: 배열을 직접 수정.
  - `firstIndex`: `id`로 사용자를 찾음.
  - 새로운 `User` 객체로 교체해 `bot`과 `sponsor`만 변경.

#### **단계 4: JSON 파일 저장**
수정된 데이터를 `TempServer.json`에 다시 저장합니다.

```swift
func saveJSONFile(users: [User], to filePath: String) -> Bool {
    do {
        // JSON 인코딩
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted // 읽기 쉬운 형식
        let data = try encoder.encode(users)
        // 파일 쓰기
        try data.write(to: URL(fileURLWithPath: filePath))
        return true
    } catch {
        print("Error saving JSON: \(error)")
        return false
    }
}
```

- **설명**:
  - `prettyPrinted`: JSON을 보기 좋게 포맷팅 (줄바꿈, 들여쓰기).
  - `write(to:)`: 파일을 덮어씌움.

#### **단계 5: 통합 코드**
위 함수들을 조합해 JSON 파일을 읽고, 수정하고, 저장하는 예시입니다.

```swift
func modifyJSONFile(filePath: String, userId: Int, newBot: String?, newSponsor: String?) -> Bool {
    // 1. JSON 파일 읽기
    guard var users = readJSONFile(from: filePath) else {
        print("Failed to read JSON file")
        return false
    }
    
    // 2. 데이터 수정
    guard updateUserData(users: &users, id: userId, bot: newBot, sponsor: newSponsor) else {
        print("User with ID \(userId) not found")
        return false
    }
    
    // 3. JSON 파일 저장
    guard saveJSONFile(users: users, to: filePath) else {
        print("Failed to save JSON file")
        return false
    }
    
    print("Successfully updated JSON file")
    return true
}

// 사용 예시
let filePath = "/path/to/TempServer.json" // 실제 경로로 교체
let success = modifyJSONFile(
    filePath: filePath,
    userId: 448134651345,
    newBot: "Gen6 Robot",
    newSponsor: "Quantum Sponsor"
)
```

- **결과 JSON** (성공 시):
  ```json
  [
      {
          "id": 448134651345,
          "first_name": "Jaehyun",
          "last_name": "Kim",
          "country": "Korea",
          "bot": "Gen6 Robot",
          "sponsor": "Quantum Sponsor"
      }
  ]
  ```

---

### 3. SwiftUI 통합 예시
SwiftUI 뷰에서 JSON 수정 기능을 호출하고, UI에서 결과를 반영하는 예시입니다. 예를 들어, 버튼을 눌러 `bot`과 `sponsor`를 업데이트합니다.

```swift
import SwiftUI

struct UserUpdateView: View {
    let filePath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        .appendingPathComponent("TempServer.json").path
    @State private var statusMessage = ""
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Update User Data")
                .font(.title)
            Button(action: {
                let success = modifyJSONFile(
                    filePath: filePath,
                    userId: 448134651345,
                    newBot: "Gen6 Robot",
                    newSponsor: "Quantum Sponsor"
                )
                statusMessage = success ? "Update successful!" : "Update failed."
            }) {
                Text("Update Bot and Sponsor")
                    .font(.headline)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            Text(statusMessage)
                .font(.subheadline)
                .foregroundColor(statusMessage.contains("success") ? .green : .red)
        }
        .padding()
    }
}

struct UserUpdateView_Previews: PreviewProvider {
    static var previews: some View {
        UserUpdateView()
    }
}
```

- **filePath**: Documents 디렉토리에 `TempServer.json`이 있다고 가정. 프로젝트 내 파일이면 `Bundle.main.url` 사용.
- **statusMessage**: 사용자에게 성공/실패 피드백 제공.

---

### 4. JSON 파일 경로 설정
`TempServer.json`의 위치에 따라 `filePath`를 설정해야 합니다.

- **프로젝트 내 파일** (읽기 전용, 번들):
  ```swift
  guard let fileURL = Bundle.main.url(forResource: "TempServer", withExtension: "json") else {
      fatalError("TempServer.json not found")
  }
  let filePath = fileURL.path
  ```
  - **주의**: 번들 파일은 쓰기 불가. 수정하려면 Documents 디렉토리에 복사해야 함.

- **Documents 디렉토리** (읽기/쓰기 가능):
  ```swift
  let filePath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
      .appendingPathComponent("TempServer.json").path
  ```

- **복사 로직** (번들 → Documents):
  ```swift
  func copyJSONToDocuments() {
      guard let sourceURL = Bundle.main.url(forResource: "TempServer", withExtension: "json") else {
          print("Source file not found")
          return
      }
      let destURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
          .appendingPathComponent("TempServer.json")
      do {
          if !FileManager.default.fileExists(atPath: destURL.path) {
              try FileManager.default.copyItem(at: sourceURL, to: destURL)
              print("File copied to Documents")
          }
      } catch {
          print("Error copying file: \(error)")
      }
  }
  ```

---

### 5. 주의사항
- **파일 권한**: iOS 앱에서 Documents 디렉토리는 쓰기 가능, 번들은 읽기 전용. 앱 샌드박스 규칙 준수.
- **JSON 형식 유지**: `bot`과 `sponsor`를 `String?`로 가정했으나, 객체(예: `{ "name": "Gen6" }`)라면 `Codable` 구조체를 추가로 정의해야 함.
- **에러 처리**: 파일 없음, 디코딩 실패, 쓰기 실패를 처리해 앱 안정성 확보.
- **동시성**: 여러 뷰에서 JSON을 동시에 수정하면 충돌 가능. 필요하면 `DispatchQueue` 또는 파일 잠금 사용.
- **테스트**:
  - 유효한 `id`로 테스트 (예: `448134651345`).
  - 잘못된 `id` (예: `999`)로 테스트 → 실패 메시지 확인.
  - 파일 경로 확인 (번들 또는 Documents).

---

### 6. 추가 요청
- **특정 수정**: `bot`/`sponsor` 외 다른 필드(예: `country`) 수정이나 특정 값(예: `Gen5 Robot`) 설정 필요하면 말씀해주세요.
- **JSON 구조**: `bot`/`sponsor`가 문자열이 아닌 객체(예: `{ "model": "Gen6", "type": "Quantum" }`)면 구조 공유해 주세요.
- **파일 위치**: `TempServer.json`이 번들, Documents, 또는 서버에 있는지 알려주시면 경로 설정 최적화 가능.
- **SwiftUI**: `UserUpdateView`에 추가 UI(예: 입력 필드, 드롭다운)나 스타일 원하면 공유해 주세요.
- **에러 UI**: 실패 시 특정 메시지나 알림(예: `Alert`) 추가 원하면 말씀해주세요.

---

### 7. 통합 예시 (전체 흐름)
다음은 JSON 수정과 UI를 결합한 최종 코드입니다.

```swift
import SwiftUI
import Foundation

// Codable 모델
struct User: Codable {
    let id: Int
    let firstName: String
    let lastName: String
    let country: String
    let bot: String?
    let sponsor: String?

    enum CodingKeys: String, CodingKey {
        case id
        case firstName = "first_name"
        case lastName = "last_name"
        case country
        case bot
        case sponsor
    }
}

// JSON 파일 처리 함수
func readJSONFile(from filePath: String) -> [User]? {
    do {
        let data = try Data(contentsOf: URL(fileURLWithPath: filePath))
        let decoder = JSONDecoder()
        return try decoder.decode([User].self, from: data)
    } catch {
        print("Error reading JSON: \(error)")
        return nil
    }
}

func updateUserData(users: inout [User], id: Int, bot: String?, sponsor: String?) -> Bool {
    if let index = users.firstIndex(where: { $0.id == id }) {
        users[index] = User(
            id: users[index].id,
            firstName: users[index].firstName,
            lastName: users[index].lastName,
            country: users[index].country,
            bot: bot,
            sponsor: sponsor
        )
        return true
    }
    return false
}

func saveJSONFile(users: [User], to filePath: String) -> Bool {
    do {
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted
        let data = try encoder.encode(users)
        try data.write(to: URL(fileURLWithPath: filePath))
        return true
    } catch {
        print("Error saving JSON: \(error)")
        return false
    }
}

func modifyJSONFile(filePath: String, userId: Int, newBot: String?, newSponsor: String?) -> Bool {
    guard var users = readJSONFile(from: filePath) else { return false }
    guard updateUserData(users: &users, id: userId, bot: newBot, sponsor: newSponsor) else { return false }
    return saveJSONFile(users: users, to: filePath)
}

// SwiftUI 뷰
struct UserUpdateView: View {
    let filePath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        .appendingPathComponent("TempServer.json").path
    @State private var statusMessage = ""
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Update User Data")
                .font(.title)
            Button(action: {
                let success = modifyJSONFile(
                    filePath: filePath,
                    userId: 448134651345,
                    newBot: "Gen6 Robot",
                    newSponsor: "Quantum Sponsor"
                )
                statusMessage = success ? "Update successful!" : "Update failed."
            }) {
                Text("Update Bot and Sponsor")
                    .font(.headline)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
            }
            Text(statusMessage)
                .font(.subheadline)
                .foregroundColor(statusMessage.contains("success") ? .green : .red)
        }
        .padding()
        .onAppear {
            // 번들에서 Documents로 파일 복사 (최초 실행 시)
            copyJSONToDocuments()
        }
    }
    
    func copyJSONToDocuments() {
        guard let sourceURL = Bundle.main.url(forResource: "TempServer", withExtension: "json") else {
            print("Source file not found")
            return
        }
        let destURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            .appendingPathComponent("TempServer.json")
        do {
            if !FileManager.default.fileExists(atPath: destURL.path) {
                try FileManager.default.copyItem(at: sourceURL, to: destURL)
                print("File copied to Documents")
            }
        } catch {
            print("Error copying file: \(error)")
        }
    }
}

struct UserUpdateView_Previews: PreviewProvider {
    static var previews: some View {
        UserUpdateView()
    }
}
```

이 코드를 사용하면 `TempServer.json`의 값을 안전하게 수정할 수 있습니다. 추가 질문이나 특정 수정이 필요하면 언제든 말씀해주세요!
